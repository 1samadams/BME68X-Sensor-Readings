#Required libraries
#pip install bme680 matplotlib pandas

#Queries sensor for CO2 values every hour, and displays the values graphically for the past 24 hours, past 5 days, and past 30 days.

import time
import bme680
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime, timedelta

# Initialize BME680 sensor
sensor = bme680.BME680(bme680.I2C_ADDR_PRIMARY)

# Data storage
data = []

# Function to get CO2 values
def get_co2_value():
    sensor.set_gas_status(bme680.ENABLE_GAS_MEAS)
    sensor.set_gas_heater_temperature(320)
    sensor.set_gas_heater_duration(150)
    sensor.select_gas_heater_profile(0)

    if sensor.get_sensor_data():
        co2_value = sensor.data.gas_resistance  # Placeholder for actual CO2 calculation
        timestamp = datetime.now()
        data.append((timestamp, co2_value))

# Function to plot data
def plot_data(data, days):
    df = pd.DataFrame(data, columns=['timestamp', 'co2'])
    end_time = datetime.now()
    start_time = end_time - timedelta(days=days)
    df = df[(df['timestamp'] >= start_time) & (df['timestamp'] <= end_time)]
    
    plt.figure(figsize=(10, 5))
    plt.plot(df['timestamp'], df['co2'], marker='o')
    plt.title(f'CO2 Levels Over the Past {days} Days')
    plt.xlabel('Timestamp')
    plt.ylabel('CO2 Levels')
    plt.grid()
    plt.show()

# Schedule hourly reading
while True:
    get_co2_value()
    time.sleep(3600)  # Wait for an hour

    # Plot data for different time ranges
    plot_data(data, 1)   # Past 24 hours
    plot_data(data, 5)   # Past 5 days
    plot_data(data, 30)  # Past 30 days
